using System;
using System.Collections.Generic;

namespace Test1
{
    class Program
    {
        private const int LIMIT = 20;
        private const double LIMIT2 = 20.0;
        private static int[] maxRangeIndex = { -1, -1, -1, -1 };
        private static readonly int[] maxRangeTotalIndex = { -1, -1, -1, -1 };

        private static readonly int[] values = {
                        08, 02,  22,  97,  38,  15,  00,  40,  00,  75,  04,  05,  07,  78,  52,  12,  50,  77,  91,  08,
                        49, 49,  99,  40,  17,  81,  18,  57,  60,  87,  17,  40,  98,  43,  69,  48,  04,  56,  62,  00,
                        81, 49,  31,  73,  55,  79,  14,  29,  93,  71,  40,  67,  53,  88,  30,  03,  49,  13,  36,  65,
                        52, 70,  95,  23,  04,  60,  11,  42,  69,  24,  68,  56,  01,  32,  56,  71,  37,  02,  36,  91,
                        22, 31,  16,  71,  51,  67,  63,  89,  41,  92,  36,  54,  22,  40,  40,  28,  66,  33,  13,  80,
                        24, 47,  32,  60,  99,  03,  45,  02,  44,  75,  33,  53,  78,  36,  84,  20,  35,  17,  12,  50,
                        32, 98,  81,  28,  64,  23,  67,  10,  26,  38,  40,  67,  59,  54,  70,  66,  18,  38,  64,  70,
                        67, 26,  20,  68,  02,  62,  12,  20,  95,  63,  94,  39,  63,  08,  40,  91,  66,  49,  94,  21,
                        24, 55,  58,  05,  66,  73,  99,  26,  97,  17,  78,  78,  96,  83,  14,  88,  34,  89,  63,  72,
                        21, 36,  23,  09,  75,  00,  76,  44,  20,  45,  35,  14,  00,  61,  33,  97,  34,  31,  33,  95,
                        78, 17,  53,  28,  22,  75,  31,  67,  15,  94,  03,  80,  04,  62,  16,  14,  09,  53,  56,  92,
                        16, 39,  05,  42,  96,  35,  31,  47,  55,  58,  88,  24,  00,  17,  54,  24,  36,  29,  85,  57,
                        86, 56,  00,  48,  35,  71,  89,  07,  05,  44,  44,  37,  44,  60,  21,  58,  51,  54,  17,  58,
                        19, 80,  81,  68,  05,  94,  47,  69,  28,  73,  92,  13,  86,  52,  17,  77,  04,  89,  55,  40,
                        04, 52,  08,  83,  97,  35,  99,  16,  07,  97,  57,  32,  16,  26,  26,  79,  33,  27,  98,  66,
                        88, 36,  68,  87,  57,  62,  20,  72,  03,  46,  33,  67,  46,  55,  12,  32,  63,  93,  53,  69,
                        04, 42,  16,  73,  38,  25,  39,  11,  24,  94,  72,  18,  08,  46,  29,  32,  40,  62,  76,  36,
                        20, 69,  36,  41,  72,  30,  23,  88,  34,  62,  99,  69,  82,  67,  59,  85,  74,  04,  36,  16,
                        20, 73,  35,  29,  78,  31,  90,  01,  74,  31,  49,  71,  48,  86,  81,  16,  23,  57,  05,  54,
                        01, 70,  54,  71,  83,  51,  54,  69,  16,  92,  33,  48,  61,  43,  52,  01,  89,  19,  67,  48};

        /*
         * получаем индекс максимального значения
         */
        static int GetMaxSumOfIndex(int index)
        {
            double o = index / LIMIT2;
            double edgeSquare = Math.Round(o - Math.Truncate(o), 2);

            Dictionary<int, int> maxDigitStep = new Dictionary<int, int>();
            DictionaryAdd(maxDigitStep, index);
            DictionaryAdd(maxDigitStep, index - LIMIT);
            DictionaryAdd(maxDigitStep, index + LIMIT);
            if (edgeSquare != 0.00)
            {
                DictionaryAdd(maxDigitStep, index - LIMIT - 1);
                DictionaryAdd(maxDigitStep, index - 1);
                DictionaryAdd(maxDigitStep, index + LIMIT - 1);
            }
            if (edgeSquare != 0.95)
            {
                DictionaryAdd(maxDigitStep, index - LIMIT + 1);
                DictionaryAdd(maxDigitStep, index + LIMIT + 1);
                DictionaryAdd(maxDigitStep, index + 1);
            }

            int maxSum = 0;
            int maxIndex = 0;
            foreach (KeyValuePair<int, int> digit in maxDigitStep)
            {
                if (digit.Key == maxRangeIndex[0] || digit.Key == maxRangeIndex[1] ||
                    digit.Key == maxRangeIndex[2] || digit.Key == maxRangeIndex[3]) continue;
                if (digit.Value > maxSum)
                {
                    maxSum = digit.Value;
                    maxIndex = digit.Key;
                }
            }

            return maxIndex;
        }

        /*
         * Заполняем dictionary
         */
        private static void DictionaryAdd(Dictionary<int, int> maxDigitStep, int local)
        {
            if (local >= 0 && local < values.Length)
                maxDigitStep.Add(local, values[local]);
        }

        /*
         * Метод обнуления массива индексов с максимальными значениями
         */
        private static void DoEmpty(int value)
        {
            for (int i = 0; i < maxRangeIndex.Length; i++)
                maxRangeIndex[i] = value;
        }

        /*
         * Получаем сумму произведения по максимальным значениям
         */
        private static void GetCalc(ref int maxSum, ref int[] maxRangeIndex)
        {
            int sumLocal = 0;
            for (int i = 0; i < maxRangeIndex.Length; i++)
            {
                Console.WriteLine("============================================");
                Console.WriteLine("index = " + maxRangeIndex[i] + ", value = " + values[maxRangeIndex[i]]);
                if (sumLocal == 0)
                {
                    sumLocal += values[maxRangeIndex[i]];
                }
                else
                {
                    sumLocal *= values[maxRangeIndex[i]];
                }
            }
            Console.WriteLine("Sum = " + sumLocal);
            if (sumLocal > maxSum)
            {
                maxSum = Math.Max(maxSum, sumLocal);
                for (int i = 0; i < maxRangeIndex.Length; i++)
                    maxRangeTotalIndex[i] = maxRangeIndex[i];
                Console.WriteLine("Сохраняем Max.Sum = " + maxSum);
            }
        }

        /*
         * Диапазон с максимальными значениями
         */
        private static void GetMaxRangeIndexStep(ref int maxSum, int step)
        {
            DoEmpty(-1);
            Console.WriteLine(step);
            maxRangeIndex[0] = step;
            maxRangeIndex[1] = GetMaxSumOfIndex(step);
            maxRangeIndex[2] = GetMaxSumOfIndex(maxRangeIndex[1]);
            maxRangeIndex[3] = GetMaxSumOfIndex(maxRangeIndex[2]);
            GetCalc(ref maxSum, ref maxRangeIndex);
        }

        /*
         *  Метод, передающий текущий индекс, для получения суммы произведения максимальных значений рядом с текущим индексом
         */
        static void DoProcess(ref int maxSum)
        {
            for (int step = 0; step < values.Length; step++)
                GetMaxRangeIndexStep(ref maxSum, step);
        }

        static void Main(string[] args)
        {
            int maxSum = 0;

            DoProcess(ref maxSum);
            Console.WriteLine("Total: maxSum = " + maxSum +
                " indexs  = " + maxRangeTotalIndex[0] +
                ",  " + maxRangeTotalIndex[1] +
                ",  " + maxRangeTotalIndex[2] +
                ",  " + maxRangeTotalIndex[3] +
                " values  = " + values[maxRangeTotalIndex[0]] +
                ",  " + values[maxRangeTotalIndex[1]] +
                ",  " + values[maxRangeTotalIndex[2]] +
                ",  " + values[maxRangeTotalIndex[3]]

                );
            Console.WriteLine("============================================");
            Console.ReadLine();
        }
    }

}
